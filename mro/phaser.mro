#
# Copyright (c) 2014 10X Genomics, Inc. All rights reserved.
#
@include "_aligner.mro"
@include "_reporter.mro"
@include "_snpindel_phaser.mro"
@include "_loupe_stages.mro"

pipeline PHASER(
    in  string  fastq_mode                  "configuration of the input fastqs. Should be BCL_PROCESSOR or ILMN_BCL2FASTQ",
    in  string  sample_id                   "sample identifier",
    in  map[]   sample_def                  "list of dictionaries containing raw_fastq_path (path to demultiplexed output),  lanes (list of lanes used or null for all lanes), sample_indices (list of sample index strings), gem_group (samples from a common GEM channel should have the same gem_group)",
    in  string  sex                         "male, female or null",
    in  string  reference_path              "path of reference directory",
    in  bed     targets                     "pulldown targets file",
    in  string  restrict_locus              "locus to restrict phasing to",
    in  bool    exclude_non_bc_reads        "exclude non whitelist barcode reads from BAM file",
    in  int     trim_length                 "bases to trim from the start of each raw read",
    in  string  barcode_whitelist           "name of barcode set used",
    in  bed     confident_regions           "bed file containing high-confidence reference_path regions, used for coverage stats",
    in  map     vc_regions_of_interest,
    in  map     cov_regions_of_interest,
    in  string  vc_precalled,
    in  string  vc_mode                     "'freebayes' or 'gatk:/path/to/GenomeAnalysisTK.jar'",
    in  vcf     vc_ground_truth             "ground-truth variants to compare against",
    in  vcf.gz  comparison_vcf,
    in  bam     validation_bam,
    in  int     vc_max_coverage,
    in  string  sample_desc,
    in  csv     p1_genes_list,
    out bam     possorted_bam,
    out bam.bai possorted_bam_index,
    out bed     high_coverage_excluded_bed,
    out bam     bcsorted_bam,
    out json    duplicate_summary,
    out json    basic_summary,
    out h5      barcode_counts,
    out json    insert_sizes,
    out json    target_dists,
    out json    mapq_counts,
    out json    coverage_results,
    out h5      coverage_details,
    out h5      target_coverage,
    out csv     coverage_csv,
    out json    single_partition_results,
    out json    filter_barcodes_results,
    out json    length_mass_results,
    out h5      fragments,
    out tsv.gz  fragment_phasing,
    out json    barcode_histogram,
    out json    variant_results,
    out vcf.gz  phased_variants,
    out json    summary,
    out csv     summary_cs,
    out loupe   loupe,
    out json    lot_info,
    out json    downsample_info,
)
{
    call _ALIGNER(
        sample_id            = self.sample_id,
        fastq_mode           = self.fastq_mode,
        sample_def           = self.sample_def,
        exclude_non_bc_reads = self.exclude_non_bc_reads,
        trim_length          = self.trim_length,
        reference_path       = self.reference_path,
        barcode_whitelist    = self.barcode_whitelist,
        targets              = self.targets,
        downsample           = null,
    )

    call _REPORTER(
        sex               = self.sex,
        bcsorted_bam      = _ALIGNER.bcsorted_bam,
        possorted_bam     = _ALIGNER.possorted_bam,
        reference_path    = self.reference_path,
        vc_max_coverage   = self.vc_max_coverage,
        targets           = self.targets,
        confident_regions = self.confident_regions,
        barcode_whitelist = self.barcode_whitelist,
        restrict_locus    = self.restrict_locus,
        lot_info          = _ALIGNER.lot_info,
        coverage_rois     = self.cov_regions_of_interest,
    )

    call _SNPINDEL_PHASER(
        coverage                   = _REPORTER.coverage_details,
        high_coverage_excluded_bed = _REPORTER.high_coverage_excluded_bed,
        sex                        = _REPORTER.sex,
        reference_path             = self.reference_path,
        restrict_locus             = self.restrict_locus,
        targets                    = self.targets,
        vc_regions_of_interest     = self.vc_regions_of_interest,
        input                      = _ALIGNER.possorted_bam,
        fragments                  = _REPORTER.fragments,
        vc_precalled               = self.vc_precalled,
        mode                       = self.vc_mode,
        ground_truth               = self.vc_ground_truth,
        validation_bam             = self.validation_bam,
        comparison_vcf             = self.comparison_vcf,
        p1_genes_list              = self.p1_genes_list,
        bc_mix_prob                = 0.001,
        min_var_hap_conf           = 0.995,
        min_junction_hap_conf      = 0.995,
        hap_block_size             = 35,
        hap_block_buffer_size      = 5,
        max_reassign_rounds        = 4,
        min_mapq_attach_bc         = 30,
        chunk_stitching_overlap    = 100000,
    )

    call SUMMARIZE_REPORTS(
        sample_id                = self.sample_id,
        reference_path           = self.reference_path,
        targets                  = self.targets,
        trim_length              = self.trim_length,
        duplicate_summary        = _ALIGNER.duplicate_summary,
        basic_results            = _REPORTER.basic_summary,
        barcode_counts           = _REPORTER.barcode_counts,
        filter_barcodes_results  = _REPORTER.filter_barcodes_results,
        coverage_results         = _REPORTER.coverage_results,
        coverage_details         = _REPORTER.coverage_details,
        variant_results          = _SNPINDEL_PHASER.results,
        sv_results               = null,
        sv_min_call_qv_wgs       = 0,
        sv_min_call_qv_target    = 0,
        short_del_results        = null,
        single_partition_results = _REPORTER.single_partition_results,
        length_mass_results      = _REPORTER.length_mass_results,
        bam_file                 = _SNPINDEL_PHASER.phased_possorted_bam,
        lot_info                 = _REPORTER.lot_info,
        downsample_info          = _ALIGNER.downsample_info,
    )

    call LOUPE_PREPROCESS(
        reference_path          = self.reference_path,
        input_vcf               = _SNPINDEL_PHASER.phased_variants,
        summarize_output        = SUMMARIZE_REPORTS.summary,
        single_partition_data   = _REPORTER.single_partition_results,
        coverage_data           = _REPORTER.coverage_results,
        phasing_quality_data    = _SNPINDEL_PHASER.results,
        fragment_histogram      = _REPORTER.fragment_histogram,
        structvar_data          = null,
        shortstructvar_data     = null,
        bkpt_details            = null,
        sorted_deduplicated_bam = _ALIGNER.possorted_bam,
        alarms                  = SUMMARIZE_REPORTS.alarms,
        targets                 = self.targets,
        fragments               = _SNPINDEL_PHASER.fragment_phasing,
        length_mass_data        = _REPORTER.length_mass_results,
        sample_desc             = self.sample_desc,
        noloupe                 = false,
    )

    return (
        duplicate_summary          = _ALIGNER.duplicate_summary,
        possorted_bam              = _SNPINDEL_PHASER.phased_possorted_bam,
        possorted_bam_index        = _SNPINDEL_PHASER.phased_possorted_bam_index,
        bcsorted_bam               = _ALIGNER.bcsorted_bam,
        variant_results            = _SNPINDEL_PHASER.results,
        phased_variants            = _SNPINDEL_PHASER.phased_variants,
        basic_summary              = _REPORTER.basic_summary,
        barcode_counts             = _REPORTER.barcode_counts,
        insert_sizes               = _REPORTER.insert_sizes,
        target_dists               = _REPORTER.target_dists,
        mapq_counts                = _REPORTER.mapq_counts,
        high_coverage_excluded_bed = _REPORTER.high_coverage_excluded_bed,
        coverage_results           = _REPORTER.coverage_results,
        coverage_details           = _REPORTER.coverage_details,
        coverage_csv               = _REPORTER.coverage_csv,
        target_coverage            = _REPORTER.target_coverage,
        single_partition_results   = _REPORTER.single_partition_results,
        filter_barcodes_results    = _REPORTER.filter_barcodes_results,
        length_mass_results        = _REPORTER.length_mass_results,
        fragments                  = _REPORTER.fragments,
        fragment_phasing           = _SNPINDEL_PHASER.fragment_phasing,
        barcode_histogram          = _REPORTER.barcode_histogram,
        summary                    = SUMMARIZE_REPORTS.summary,
        summary_cs                 = SUMMARIZE_REPORTS.summary_cs,
        loupe                      = LOUPE_PREPROCESS.output_for_loupe,
        lot_info                   = _REPORTER.lot_info,
        downsample_info            = _ALIGNER.downsample_info,
    )
}
